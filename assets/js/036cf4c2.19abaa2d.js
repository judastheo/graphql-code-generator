"use strict";(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[1340],{35318:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10792:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(25773),a=n(30808),o=(n(27378),n(35318)),l=["components"],i={id:"apollo-local-state",title:"Apollo Local State"},c=void 0,p={unversionedId:"integrations/apollo-local-state",id:"integrations/apollo-local-state",isDocsHomePage:!1,title:"Apollo Local State",description:"If you are using apollo-client >2.5 (or older, with apollo-link-state) to manage your app state with GraphQL, you're probably using a client-side only GraphQL schema and client-side directives such as @client.",source:"@site/docs/integrations/apollo-local-state.md",sourceDirName:"integrations",slug:"/integrations/apollo-local-state",permalink:"/docs/integrations/apollo-local-state",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/integrations/apollo-local-state.md",tags:[],version:"current",frontMatter:{id:"apollo-local-state",title:"Apollo Local State"},sidebar:"sidebar",previous:{title:"graphql-modules",permalink:"/docs/presets/graphql-modules"},next:{title:"Create-React-App",permalink:"/docs/integrations/create-react-app"}},s=[],u={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/v2/data/local-state/"},"apollo-client")," >2.5 (or older, with ",(0,o.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/link/links/state.html"},"apollo-link-state"),") to manage your app state with GraphQL, you're probably using a client-side only GraphQL schema and client-side directives such as ",(0,o.kt)("inlineCode",{parentName:"p"},"@client"),"."),(0,o.kt)("p",null,"These types and directives are not part of your remote GraphQL schema."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"query myQuery {\n  todos {\n    id\n    title\n    checked\n    selected @client\n  }\n}\n")),(0,o.kt)("p",null,"If you wish to get better integration and fully type-safe types for your client-side schema as well, you can create a ",(0,o.kt)("inlineCode",{parentName:"p"},".graphql")," file for your local schema, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"type Todo {\n  selected: Boolean!\n}\n")),(0,o.kt)("p",null,"And then, you can merge this part of the schema with your remote schema, by specifying it as part of your ",(0,o.kt)("inlineCode",{parentName:"p"},"schema")," field:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"schema:\n  - http://my-remote-schema/graphql\n  - my-client-schema.graphql\n")),(0,o.kt)("p",null,"This way, the GraphQL Code Generator will generate complete typings that matches both your client fields and server fields."),(0,o.kt)("p",null,"If you only plan to perform a query with Apollo's local state, extend the ",(0,o.kt)("inlineCode",{parentName:"p"},"Query")," class with the field you're trying to call in your local ",(0,o.kt)("inlineCode",{parentName:"p"},"schema"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-.graphql"},"extend type Query {\n  todos: Todo\n}\n")))}d.isMDXComponent=!0}}]);