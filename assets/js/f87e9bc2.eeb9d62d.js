"use strict";(self.webpackChunk_graphql_codegen_website=self.webpackChunk_graphql_codegen_website||[]).push([[1134],{35318:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=l(n),m=a,d=g["".concat(p,".").concat(m)]||g[m]||c[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},40707:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return g}});var r=n(25773),a=n(30808),o=(n(27378),n(35318)),i=["components"],s={id:"gql-tag-operations",title:"gql-tag-operations"},p=void 0,l={unversionedId:"presets/gql-tag-operations",id:"presets/gql-tag-operations",isDocsHomePage:!1,title:"gql-tag-operations",description:"This preset generates typings for your inline gql function usages, without having to manually specify import statements for the documents. All you need to do is import your gql function and run codegen in watch mode.",source:"@site/docs/presets/gql-tag-operations.md",sourceDirName:"presets",slug:"/presets/gql-tag-operations",permalink:"/docs/presets/gql-tag-operations",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/presets/gql-tag-operations.md",tags:[],version:"current",frontMatter:{id:"gql-tag-operations",title:"gql-tag-operations"},sidebar:"sidebar",previous:{title:"All Presets",permalink:"/docs/presets/presets-index"},next:{title:"near-operation-file",permalink:"/docs/presets/near-operation-file"}},u=[{value:"Getting Started",id:"getting-started",children:[]}],c={toc:u};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This preset generates typings for your inline ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function usages, without having to manually specify import statements for the documents. All you need to do is import your ",(0,o.kt)("inlineCode",{parentName:"p"},"gql")," function and run codegen in watch mode."),(0,o.kt)("p",null,"Huge thanks to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/arcanis"},"Ma\xebl Nison"),", who conceptualized the foundation for this preset ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/arcanis/graphql-typescript-integration"},"over here"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { gql } from '@app/gql';\n\n// TweetFragment is a fully typed document node\nconst TweetFragment = gql(/* GraphQL */ `\n  fragment TweetFragment on Tweet {\n    id\n    body\n  }\n`);\n\nconst TweetsQueryWithFragment = gql(/* GraphQL */ `\n  query TweetsWithFragmentQuery {\n    Tweets {\n      id\n      ...TweetFragment\n    }\n  }\n`);\n")),(0,o.kt)("p",null,(0,o.kt)("h2",{parentName:"p"},"Installation"),(0,o.kt)("img",{alt:"gql-tag-operations-preset plugin version",src:"https://img.shields.io/npm/v/@graphql-codegen/gql-tag-operations-preset?color=%23e15799&label=plugin\xa0version&style=for-the-badge"}),(0,o.kt)("div",{parentName:"p",className:"admonition admonition-shell"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16pt",height:"16pt",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",d:"M0 0v16h16V0zm15.063 15.063H.937v-11h14.126zm0-11.938H.937V.937h14.126zm0 0"}),(0,o.kt)("path",{parentName:"svg",d:"M1.875 1.563h.938V2.5h-.938zm0 0M3.438 1.563h.937V2.5h-.938zm0 0M5 1.563h.938V2.5H5zm0 0M1.875 5.074v1.348l.988.637-.988.578V9.05l2.828-1.668v-.586zm0 0M5.34 7.559h1.027v1.226H5.34zm0 0M5.34 5.32h1.027v1.23H5.34zm0 0M6.8 8.785h2.356v1.137H6.801zm0 0"}))),"Using ",(0,o.kt)("inlineCode",{parentName:"h5"},"yarn"))),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"yarn add -D @graphql-codegen/gql-tag-operations-preset\n"))))),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"In order to use this preset, you need to add the following configuration to your ",(0,o.kt)("inlineCode",{parentName:"p"},"codegen.yml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"schema: src/path/to/your/schema.graphql\ndocuments:\n  - 'src/**/*.ts'\n  - '!src/gql/**/*'\ngenerates:\n  ./src/gql/:\n    preset: gql-tag-operations-preset\n")),(0,o.kt)("p",null,"It is also recommended, that you link ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/gql")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"@app/gql"),", so you can import your gql function easily from anywhere within your app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D @app/gql@link:./src/gql\n")),(0,o.kt)("p",null,"Now start your codegen in watch mode via ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn graphql-codegen --watch"),"."),(0,o.kt)("p",null,"Create a new file within your ",(0,o.kt)("inlineCode",{parentName:"p"},"src")," directory, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/index.ts")," and add a query for your schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { gql } from '@app/gql';\n\n// TweetsQuery is a fully typed document node!\nconst TweetsQuery = gql(/* GraphQL */ `\n  query TweetsQuery {\n    Tweets {\n      id\n    }\n  }\n`);\n")),(0,o.kt)("p",null,"Next we can simply add our GraphQL client of choice and use the typed document! Let's try urql!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { gql } from '@app/gql';\nimport { useQuery } from 'urql';\n\n// TweetsQuery is a fully typed document node/\nconst TweetsQuery = gql(/* GraphQL */ `\n  query TweetsQuery {\n    Tweets {\n      id\n      body\n    }\n  }\n`);\n\nconst Tweets = () => {\n  const [result] = useQuery({ query: TweetsQuery });\n  const { data, fetching, error } = result;\n\n  if (fetching) return <p>Loading...</p>;\n  if (error) return <p>Oh no... {error.message}</p>;\n\n  return (\n    <ul>\n      {/* data is fully typed \ud83c\udf89 */}\n      {data.Tweets.map(tweet => (\n        <li key={tweet.id}>{tweet.body}</li>\n      ))}\n    </ul>\n  );\n};\n")),(0,o.kt)("p",null,"If we want to use fragments, we can use some utilities for accessing the fragment types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { gql, DocumentType } from '../gql';\n\nconst TweetFragment = gql(/* GraphQL */ `\n  fragment TweetFragment on Tweet {\n    id\n    body\n  }\n`);\n\nconst Tweet = (props: {\n  /** tweet property has the correct type \ud83c\udf89 */\n  tweet: DocumentType<typeof TweetFragment>;\n}) => {\n  return <li data-id={props.id}>{props.body}</li>;\n};\n\nconst TweetsQuery = gql(/* GraphQL */ `\n  query TweetsQuery {\n    Tweets {\n      id\n      ...TweetFragment\n    }\n  }\n`);\n\nconst Tweets = () => {\n  const [result] = useQuery({ query: TweetsQuery });\n  const { data, fetching, error } = result;\n\n  if (fetching) return <p>Loading...</p>;\n  if (error) return <p>Oh no... {error.message}</p>;\n\n  return (\n    <ul>\n      {data.Tweets.map(tweet => (\n        <Tweet key={tweet.id} tweet={tweet} />\n      ))}\n    </ul>\n  );\n};\n")))}g.isMDXComponent=!0}}]);